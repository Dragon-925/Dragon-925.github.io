import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as t,d as e,a as d}from"./app-ZPnUvyky.js";const r={},c=e('<h1 id="《git》" tabindex="-1"><a class="header-anchor" href="#《git》" aria-hidden="true">#</a> 《Git》</h1><h3 id="查看本地分支" tabindex="-1"><a class="header-anchor" href="#查看本地分支" aria-hidden="true">#</a> 查看本地分支</h3><p><code>git branch</code></p><h3 id="创建新分支" tabindex="-1"><a class="header-anchor" href="#创建新分支" aria-hidden="true">#</a> 创建新分支</h3><p><code>git branch ${branch_name}</code></p><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支" aria-hidden="true">#</a> 切换分支</h3><p><code>git checkout ${branch_name}</code></p><h3 id="创建远程分支" tabindex="-1"><a class="header-anchor" href="#创建远程分支" aria-hidden="true">#</a> 创建远程分支</h3><p><code>git push -u origin ${branch_name}</code></p><p>将 &lt;branch_name&gt; 分支的代码推送到 origin 远程仓库中。 如果 origin 远程仓库中不存在同名分支，则在 origin 中创建一个新的同名分支。 建立本地分支 &lt;branch_name&gt; 与远程分支 origin/&lt;branch_name&gt; 之间的跟踪关系。这意味着，在以后的推送和拉取操作中，Git 会自动将本地分支与远程分支同步，从而方便你进行协作开发。 -u 参数是 --set-upstream 的简写形式，它告诉 Git 将本地分支与远程分支建立跟踪关系。一旦建立了跟踪关系，你就可以使用 git pull 或 git push 命令来自动拉取或推送与远程分支同步的代码。 总之，git push -u origin &lt;branch_name&gt; 命令是将本地分支的代码推送到远程仓库，并建立分支之间的跟踪关系的缩写形式。</p><h3 id="从主分支更新当前分支内容" tabindex="-1"><a class="header-anchor" href="#从主分支更新当前分支内容" aria-hidden="true">#</a> 从主分支更新当前分支内容</h3><p><code>git pull origin master</code></p><h3 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h3><p>本地删除：<code>git branch -D ${branch_name}</code></p><p>远程删除：<code>git push origin --delete ${branch_name}</code></p><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志" aria-hidden="true">#</a> 日志</h3><p>查看：<code>git log</code></p><p>退出：<code>q或者:q</code></p><h3 id="回滚" tabindex="-1"><a class="header-anchor" href="#回滚" aria-hidden="true">#</a> 回滚</h3><blockquote><p>reset</p></blockquote><ol><li>git reset --sort：回退到某一个版本，保留暂存区和工作区的修改内容</li><li>git reset --hard【不推荐】：回退到某一个版本，丢弃暂存区和工作区的修改内容</li><li>git reset --mixed：回退到某一个版本，保留工作区内容丢失暂存区的修改内容</li></ol>',21),h=d("p",{hash值:""},"命令使用： git reset --sort/hard/mixed $",-1),o=e('<h3 id="备份回滚" tabindex="-1"><a class="header-anchor" href="#备份回滚" aria-hidden="true">#</a> 备份回滚</h3><p>要在Git中进行远程回滚操作，可以按照以下步骤进行：</p><p>首先，使用<code>git log</code>命令查看提交记录的完整列表。确定需要回滚到的特定提交的<code>commit ID</code>（或者称为SHA值）。</p><p>然后，运行以下命令来创建一个新分支并切换到该分支上：</p><p><code>git checkout -b &lt;new_branch&gt; &lt;commit_id&gt;</code></p><p>其中，<code>&lt;new_branch&gt;</code>是你想要创建的新分支名字，而 <code>&lt;commit_id&gt;</code> 则是你希望回滚到的特定提交的 <code>commit ID</code>。</p><p>接下来，将这个新分支推送到远程仓库：</p><p><code>git push origin &lt;new_branch&gt;</code></p><p>最后，如果你认为这次回滚没有问题，可以删除原始分支：</p><p><code>git branch -D &lt;original_branch&gt;</code></p><p>注意，<code>-D</code>选项会永久性地删除分支，所以请小心使用。</p><p>现在，你已经成功地通过远程回滚了指定的提交。</p><h3 id="操作回溯" tabindex="-1"><a class="header-anchor" href="#操作回溯" aria-hidden="true">#</a> 操作回溯</h3><p>git中所有的操作都可以进行回溯，命令如下：</p><p><code>git reflog</code> 查看操作的步骤值</p><p>然后使用<code>git reset --hard ${回退值}</code></p>',16),n=[c,h,o];function p(s,g){return i(),t("div",null,n)}const b=a(r,[["render",p],["__file","git.html.vue"]]);export{b as default};
