const o=JSON.parse('{"key":"v-40eee6a0","path":"/language/Boot/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE.html","title":"《Spring Boot 自动配置》","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2019-12-28T00:00:00.000Z","category":["Java","Spring Boot"],"tag":["Boot原理"]},"headers":[],"git":{},"readingTime":{"minutes":0.8,"words":241},"filePathRelative":"language/Boot/SpringBoot自动配置.md","localizedDate":"2019年12月28日","excerpt":"<h1> 《Spring Boot 自动配置》</h1>\\n<p><img src=\\"https://pic.imgdb.cn/item/65a8b862871b83018a9b062f.png\\"></p>\\n<p>  简单来说，就是将第三方的组件，配置到我们的IOC容器中。在这个过程不需要开发人员去编写相关配置，实现方式就是在启动类中标注@SpringBootApplication注解</p>\\n<p>而@SpringBootApplication注解又是一个复合注解，实际上实现自动配置的注解是@EnableAutoConfiguration注解，具体实现主要有3点：</p>\\n<ul>\\n<ol>1.引入start第三方组件，一定要被@Configuration注解标注，其次必须要用@Bean注解标注注入IOC容器的Bean对象</ol>\\n<ol>2.再使用约定大于配置的理念，将第三方的start的配置类全路径，写到MEAT-INF/spring.factories文件中</ol>\\n<ol>3.Spring Boot在拿到第三方jar包后，根据ImportSelector接口去动态选择加载，从而完成自动配置</ol>\\n</ul>"}');export{o as data};
