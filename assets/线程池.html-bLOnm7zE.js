const n=JSON.parse('{"key":"v-2fcd8720","path":"/language/Java/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html","title":"《线程池》","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2020-05-05T00:00:00.000Z","category":["Java"],"tag":["并发","多线程"]},"headers":[{"level":2,"title":"1. 线程池的七大参数","slug":"_1-线程池的七大参数","link":"#_1-线程池的七大参数","children":[]},{"level":2,"title":"2. 执行顺序","slug":"_2-执行顺序","link":"#_2-执行顺序","children":[]},{"level":2,"title":"3.创建方式","slug":"_3-创建方式","link":"#_3-创建方式","children":[]}],"git":{"createdTime":1706778605000,"updatedTime":1706778605000,"contributors":[{"name":"sz-Dawson","email":"dragon.zbl@qq.com","commits":1}]},"readingTime":{"minutes":7.5,"words":2249},"filePathRelative":"language/Java/线程池.md","localizedDate":"2020年5月5日","excerpt":"<h1> 《线程池》</h1>\\n<blockquote>\\n<p>什么是线程池？</p>\\n</blockquote>\\n<p>就是有多条线程存放在一个池子中，共我们使用。</p>\\n<blockquote>\\n<p>为什么不自己创建线程而使用线程池？</p>\\n</blockquote>\\n<ol>\\n<li>\\n<p>降低资源消耗\\n创建和销毁线程是昂贵的，因为涉及到与操作系统交互的过程。频繁地创建和销毁线程会导致显著的性能开销。线程池通过重用已有线程来减少这种开销，因为线程一旦创建就可以被多个任务复用，避免了频繁的创建和销毁。</p>\\n</li>\\n<li>\\n<p>提高响应速度\\n当任务到达时，任务可以不需要等待线程创建就立即执行。因为线程池中的线程已经预先创建好，等待工作，这样可以减少任务的启动时间，提高系统的响应速度。</p>\\n</li>\\n<li>\\n<p>提高线程的可管理性\\n线程是稀缺资源，如果无限制地创建，很容易耗尽系统资源，导致系统崩溃。线程池可以统一分配、调优和监控线程。管理员可以通过调整线程池的配置来优化性能，比如调整线程池大小、设置最大执行时间等。</p>\\n</li>\\n<li>\\n<p>提供更强大的功能\\n线程池提供了丰富的功能，比如线程池大小的动态调整、定时任务执行、任务队列管理和线程池状态的详细控制等。这些功能使得线程的管理更加灵活和强大。</p>\\n</li>\\n<li>\\n<p>避免资源竞争导致的系统不稳定\\n如果每个请求或任务都创建一个新线程，那么在高负载条件下，系统可能会创建大量线程，这会导致过多的上下文切换和内存消耗，甚至可能耗尽系统资源。线程池通过限制当前运行的线程数量，帮助避免这种情况，从而保持系统的稳定性。</p>\\n</li>\\n<li>\\n<p>提供任务排队机制\\n线程池通常与工作队列配合使用，当所有线程都忙时，新的任务会被放入队列中等待执行。这种排队机制使得任务处理更加平滑，避免了在高负载下的崩溃或拒绝服务。</p>\\n</li>\\n</ol>"}');export{n as data};
