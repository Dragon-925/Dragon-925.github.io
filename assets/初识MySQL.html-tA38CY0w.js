import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,f as p,a as n}from"./app-qIGuAw0h.js";const t={},o=n(`<h1 id="《mysql-初始》" tabindex="-1"><a class="header-anchor" href="#《mysql-初始》" aria-hidden="true">#</a> 《MySQL 初始》</h1><h2 id="一、数据库操作" tabindex="-1"><a class="header-anchor" href="#一、数据库操作" aria-hidden="true">#</a> 一、数据库操作</h2><h3 id="_1-初识-mysql" tabindex="-1"><a class="header-anchor" href="#_1-初识-mysql" aria-hidden="true">#</a> 1.初识 MySQL</h3><blockquote><p>操作系统、数据结构与算法、离散数学、数字电路、体系结构、编译原理</p></blockquote><h3 id="_2-为什么学习数据库" tabindex="-1"><a class="header-anchor" href="#_2-为什么学习数据库" aria-hidden="true">#</a> 2.为什么学习数据库</h3><p><mark>数据库是所有软件体系中最核心的存在</mark></p><h3 id="_3-数据库操作" tabindex="-1"><a class="header-anchor" href="#_3-数据库操作" aria-hidden="true">#</a> 3.数据库操作</h3><ul><li><p>创建数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> s <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">databases</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> 数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_4-结构化查询语句分类" tabindex="-1"><a class="header-anchor" href="#_4-结构化查询语句分类" aria-hidden="true">#</a> 4.结构化查询语句分类</h3><table><thead><tr><th>名称</th><th>命令</th></tr></thead><tbody><tr><td>DDL（数据定义语言）</td><td>CREATE、DROP、ALTER</td></tr><tr><td>DML（数据操作语言）</td><td>INSERT、UPDATE、DELETE</td></tr><tr><td>DQL（数据查询语言）</td><td>SELECT</td></tr><tr><td>DCL（数据控制语言）</td><td>GRANT、commit、rollback</td></tr></tbody></table><ul><li><p><strong>创建数据表</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>表名<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>
	<span class="token string">&#39;字段名&#39;</span> 类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>表类型 表字符集 注释
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-数据值和列类型" tabindex="-1"><a class="header-anchor" href="#_5-数据值和列类型" aria-hidden="true">#</a> 5.数据值和列类型</h3><ul><li>数值类型</li></ul><table><thead><tr><th>类型</th><th>说明</th><th>存储要求</th></tr></thead><tbody><tr><td><em>tinyint</em></td><td>非常小的数据</td><td>1 字节</td></tr><tr><td><em>smallint</em></td><td>较小的数据</td><td>2 字节</td></tr><tr><td><em>mediumint</em></td><td>中等大小的数据</td><td>3 字节</td></tr><tr><td>int</td><td>标准整数</td><td>4 字节</td></tr><tr><td>bigint</td><td>较大的整数</td><td>8 字节</td></tr><tr><td>float</td><td>单精度浮点数</td><td>4 字节</td></tr><tr><td>double</td><td>双精度浮点数</td><td>8 字节</td></tr><tr><td>decimal</td><td>字符串的浮点数</td><td></td></tr></tbody></table><ul><li>字符串类型</li></ul><table><thead><tr><th>类型</th><th>最大长度</th></tr></thead><tbody><tr><td>char[x]</td><td>x 字符</td></tr><tr><td>varchar[x]</td><td>变长</td></tr><tr><td>tinytext</td><td>2<sup>8</sup>-1 字节</td></tr><tr><td>text</td><td>2<sup>16</sup>-1</td></tr></tbody></table><ul><li>日期和时间型数值类型</li></ul><table><thead><tr><th>类型</th><th>说明</th><th>取值</th></tr></thead><tbody><tr><td>DATE</td><td>YYYY-MM-DD</td><td></td></tr><tr><td>TIME</td><td>Hh:mm:ss</td><td></td></tr><tr><td>DATETIME</td><td>YY-MM-DD hh:mm:ss</td><td></td></tr><tr><td>TIMESTAMP</td><td>YYYYMMDDhhmmss 格式表示时间戳</td><td></td></tr><tr><td>YEAR</td><td>YYYY 格式的年份值</td><td>1901~2155</td></tr></tbody></table><ul><li>NULL 值 <ul><li>理解为“无值”/未知值</li><li>不能用 NULL 进行算术运算，结果仍为 NULL</li></ul></li></ul><h3 id="_6-数据字段属性" tabindex="-1"><a class="header-anchor" href="#_6-数据字段属性" aria-hidden="true">#</a> 6.数据字段属性</h3><ul><li><p>UnSigned</p><ul><li>无符号</li><li>不允许负数</li></ul></li><li><p>ZEROFILL</p><ul><li>0 填充</li><li>不足位数的用 0 填充</li></ul></li><li><p>auto_increment</p><ul><li><p>自动增长</p></li><li><p>通常用于设置主键</p></li><li><p>可定义起始值和步长</p><blockquote><p>当前表设置步长（auto_increment = 100）</p><p>set @@auto_increment_increment=5;--步长</p></blockquote></li></ul></li><li><p>default</p><ul><li>默认的</li><li>用于设置默认值</li><li>例如：性别字段，默认为‘男’，否则为‘女’；若无指定该列的值，则默认值为‘男’的值</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>t0<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;序号&#39;</span><span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;匿名&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
    sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;性别&#39;</span><span class="token punctuation">,</span>
    birth <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;生日&#39;</span>
     <span class="token comment"># 默认default (&#39;0000-00-00 00:00:00&#39;)</span>
    <span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>注释</p><blockquote><p>单行注释： #，--</p><p>多行注释：/* ....*/</p></blockquote></li></ul><h3 id="_7-数据表类型" tabindex="-1"><a class="header-anchor" href="#_7-数据表类型" aria-hidden="true">#</a> 7.数据表类型</h3><ul><li><p>MySQL 的数据表的类型：MyISAM,InnoDB,HEAP,BOB,CSV 等...</p><table><thead><tr><th>名称</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>事务处理</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>相对较小</td><td>相对较大，约 2 倍</td></tr></tbody></table><blockquote><p>适用场合</p><p>​ MyISAM：节约空间和响应速度</p><p>​ InnoDB：安全性、事务处理和多用户操作数据表</p></blockquote></li><li><p>数据表存储位置</p><ul><li><p>MySQL 数据表以文件方式存放在磁盘中</p><p><mark>包括表文件，数据文件和数据库的选项文件</mark></p><p><mark>位置：MySQL 安装目录\\data\\下存放数据表。目录名对应数据库名，该目录下文件名对应数据表。</mark></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">&quot;%datadir%&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>*.frm -- 表结构定义文件</p></li><li><p>*.MYD -- 数据文件(data)</p></li><li><p>*.MYI -- 索引文件(index)</p></li><li><p>innoDB 类型数据表只有一个*.frm 文件，以及上一级目录的 ibadata1 文件</p></li><li><p>MyISAM 类型数据表对应三个文件</p></li></ul></li></ul><h2 id="二、dml-语言-操作" tabindex="-1"><a class="header-anchor" href="#二、dml-语言-操作" aria-hidden="true">#</a> 二、DML 语言（操作）</h2><h3 id="_1-外键-foreign-key" tabindex="-1"><a class="header-anchor" href="#_1-外键-foreign-key" aria-hidden="true">#</a> 1.外键（<em>foreign key</em>）</h3><blockquote><p>表示两个关系之间的相关联系，即外键也是另外一个关系的主键。</p><p>外键在某个表中作为主键，则该表称为主表。</p><p>具有此外见的表被称为从表</p></blockquote><p><mark>在表一中设置主键，将该字段的值放入表二，即是表二的外键</mark></p><ul><li><p>外键作用</p><p>保持数据一致性、完整性</p><p>目的是控制存储在外键表中的数据约束，使得两张表形成关联</p></li><li><p>外键的创建</p><p>表一</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;学号&#39;</span><span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;匿名&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span>
    <span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表二</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> score<span class="token punctuation">(</span>
    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;学号&#39;</span><span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
    math <span class="token keyword">double</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;高数&#39;</span><span class="token punctuation">,</span>
    chinese <span class="token keyword">double</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;语文&#39;</span><span class="token punctuation">,</span>
    english <span class="token keyword">double</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;英语&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">constraint</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">references</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>创建外键的第二种方式</p></blockquote></li><li><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> score <span class="token keyword">add</span> <span class="token keyword">constraint</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">references</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>外键删除</strong></p><p>删除主表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span>
<span class="token comment"># 注意：删除具有主外键关系的表时，要先删除子表，后删除主表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>ERROR 3730 (HY000): Cannot drop table &#39;student&#39; referenced by a foreign key constraint &#39;score_ibfk_1&#39; on table &#39;score&#39;.</mark></p></li></ul><h3 id="_2-添加数据" tabindex="-1"><a class="header-anchor" href="#_2-添加数据" aria-hidden="true">#</a> 2.添加数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-修改数据" tabindex="-1"><a class="header-anchor" href="#_3-修改数据" aria-hidden="true">#</a> 3.修改数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 列名 <span class="token operator">=</span> <span class="token keyword">value</span> <span class="token keyword">where</span> 条件<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-删除数据" tabindex="-1"><a class="header-anchor" href="#_4-删除数据" aria-hidden="true">#</a> 4.删除数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>老大 drop <ul><li>删除内容和定义，释放空间。简单来说就是把整个表去掉.以后要新增数据是不可能的,除非新增一个表</li></ul></li><li>老二 truncate <ul><li>删除内容、释放空间但不删除定义。与 drop 不同的是,他只是清空表数据而已,他比较温柔</li></ul></li><li>老三 delete <ul><li>删除内容不删除定义，不释放空间。三兄弟之中最容易欺负的一个</li></ul></li></ul><h3 id="_5-truncate" tabindex="-1"><a class="header-anchor" href="#_5-truncate" aria-hidden="true">#</a> 5.truncate</h3><blockquote><p>作用：完全清空表数据，但表结构，索引，约束等不变</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">truncate</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>注意：二者区别</mark></p><ul><li><p>相同点：</p><p>都能删除数据，不删除表结构，但 truncate 速度更快</p></li><li><p>不同点：</p><ul><li>使用 truncate table 重新设置 auto_increment 计数器</li><li>使用 truncate table 不会对事务有影响</li></ul></li></ul><h2 id="三、dql-语言-查询" tabindex="-1"><a class="header-anchor" href="#三、dql-语言-查询" aria-hidden="true">#</a> 三、DQL 语言（查询）</h2><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><h3 id="_1-指定查询字段" tabindex="-1"><a class="header-anchor" href="#_1-指定查询字段" aria-hidden="true">#</a> 1.指定查询字段</h3><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li><p>给字段取新别名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">as</span> 姓名 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>给表取新别名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> 表名 <span class="token keyword">as</span> 别名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>计算后的总值用新名称代替</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token string">&#39;姓名:&#39;</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">as</span> 新名 <span class="token keyword">from</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><blockquote><p>distinct 关键字使用</p></blockquote><p>作用：去掉重复记录只保留一条</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> name <span class="token keyword">from</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>使用表达式的例</p></blockquote><p>应用场景 :</p><ul><li><p>SELECT 语句返回结果列中使用</p></li><li><p>SELECT 语句中的 ORDER BY , HAVING 等子句中使用</p></li><li><p>DML 语句中的 where 条件语句中使用表达式</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@auto_increment_increment</span><span class="token punctuation">;</span><span class="token comment">#查看步长</span>
<span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 查看版本号</span>
<span class="token keyword">select</span> <span class="token number">100</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">50</span> <span class="token keyword">as</span> 计算结果<span class="token punctuation">;</span> <span class="token comment">#表达式</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>score<span class="token operator">+</span><span class="token number">50</span> <span class="token keyword">as</span> <span class="token string">&#39;提分后&#39;</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-where-条件语句" tabindex="-1"><a class="header-anchor" href="#_2-where-条件语句" aria-hidden="true">#</a> 2.where 条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><ul><li><p>查询考试成绩在 95-100 之间</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> score<span class="token operator">&gt;=</span><span class="token number">95</span> <span class="token operator">and</span> score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment"># AND也可以写成“&amp;&amp;”</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> score<span class="token operator">&gt;=</span><span class="token number">95</span> <span class="token operator">&amp;&amp;</span> score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>模糊查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> score <span class="token operator">between</span> <span class="token number">95</span> <span class="token operator">and</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>除了 100 号的同学，都要</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">!=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment"># 或者</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> <span class="token operator">not</span> id <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>模糊查询：测试</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># LIKE</span>
<span class="token comment">#======================================================</span>
<span class="token comment">#like结合使用通配符：%（代表0到任意个字符）</span>
<span class="token comment"># _(一个字符)</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;赵%&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># 查询赵后面只有一个字的</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;赵_&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># 查询赵后面只有二个字的</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;赵__&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#查询姓名中含有龙的</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span><span class="token string">&#39;%龙%&#39;</span><span class="token punctuation">;</span>


<span class="token comment"># IN</span>
<span class="token comment">#=======================================================</span>
<span class="token comment">#查询学号为1000，1001，1002的学生姓名</span>
<span class="token keyword">select</span> name <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#查询在张家口和石家庄的学生</span>
<span class="token keyword">select</span> name <span class="token keyword">from</span> student <span class="token keyword">where</span> address <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">&#39;张家口&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;石家庄&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment"># NULL 空</span>
<span class="token comment">#=======================================================</span>
<span class="token comment">#不能直接写 =NULL，这是错误的，需要用 is null</span>
<span class="token comment">#查询生日没有填写的学生姓名</span>
<span class="token keyword">select</span> name <span class="token keyword">from</span> student <span class="token keyword">where</span> bir <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-连接查询" tabindex="-1"><a class="header-anchor" href="#_3-连接查询" aria-hidden="true">#</a> 3.连接查询</h3><ul><li><p>内连接</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>name <span class="token keyword">from</span> student s <span class="token keyword">inner</span> <span class="token keyword">join</span> result r <span class="token keyword">on</span> r<span class="token punctuation">.</span>id <span class="token operator">=</span> s<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>等值连接</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>name <span class="token keyword">from</span> student s<span class="token punctuation">,</span>result r <span class="token keyword">where</span> r<span class="token punctuation">.</span>id<span class="token operator">=</span>s<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_4-排序和分页" tabindex="-1"><a class="header-anchor" href="#_4-排序和分页" aria-hidden="true">#</a> 4.排序和分页</h3><blockquote><p>ORDER BY</p></blockquote><ul><li><p>ORDER BY 语句用于根据指定的列对结果集进行排序。</p></li><li><p>如果按照降序对记录进行排序，可以使用 DESC 关键字。</p></li><li><p>ORDER BY 语句默认按照 ASC 升序对记录进行排序。</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询 数据结构 -1 的所有考试结果（学号 姓名 科目成绩） 降序</span>

<span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sbname<span class="token punctuation">,</span>sscore <span class="token keyword">from</span> student s
<span class="token keyword">inner</span> <span class="token keyword">join</span> result r <span class="token keyword">on</span> r<span class="token punctuation">.</span>id <span class="token operator">=</span> s<span class="token punctuation">.</span>id
<span class="token keyword">inner</span> <span class="token keyword">join</span> subject sub <span class="token keyword">on</span> r<span class="token punctuation">.</span>subjectid <span class="token operator">=</span> sub<span class="token punctuation">.</span>subjectid <span class="token keyword">where</span> sbname<span class="token operator">=</span><span class="token string">&#39;数据结构&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> sscore <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>分页</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 每页显示5条数据</span>
<span class="token comment">#=======================================================</span>
<span class="token keyword">select</span> s<span class="token punctuation">.</span>sid<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>subname<span class="token punctuation">,</span>sr <span class="token keyword">from</span> student s
<span class="token keyword">inner</span> <span class="token keyword">join</span> result r
<span class="token keyword">on</span> r<span class="token punctuation">.</span>sid <span class="token operator">=</span> s<span class="token punctuation">.</span>sid
<span class="token keyword">inner</span> <span class="token keyword">join</span> subject sub
<span class="token keyword">on</span> r<span class="token punctuation">.</span>subid <span class="token operator">=</span> sub<span class="token punctuation">.</span>subid
<span class="token keyword">where</span> subname <span class="token operator">=</span> <span class="token string">&#39;数据结构&#39;</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> sr <span class="token keyword">desc</span><span class="token punctuation">,</span>sid
<span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span>

<span class="token comment"># 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span>
<span class="token comment">#=======================================================</span>
<span class="token keyword">select</span> sid<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>cname<span class="token punctuation">,</span>score <span class="token keyword">from</span> student s
<span class="token keyword">inner</span> <span class="token keyword">join</span> result r
<span class="token keyword">on</span> r<span class="token punctuation">.</span>sid <span class="token operator">=</span> s<span class="token punctuation">.</span>sid
<span class="token keyword">inner</span> <span class="token keyword">join</span> subject sub
<span class="token keyword">on</span> r<span class="token punctuation">.</span>subid <span class="token operator">=</span> sub<span class="token punctuation">.</span>id
<span class="token keyword">where</span> subname<span class="token operator">=</span><span class="token string">&#39;Java第一学年&#39;</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> sr <span class="token keyword">desc</span>
<span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-子查询" tabindex="-1"><a class="header-anchor" href="#_5-子查询" aria-hidden="true">#</a> 5.子查询</h3><blockquote><p>什么是子查询？</p><p>​ 在查询语句中的 where 条件子句中，又嵌套了另外一条查询语句</p><p>​ 嵌套查询可由多个子查询组成，求解的方式是由里及外</p><p>​ 子查询返回的结果一般都是集合，故而建议使用**<em>IN</em>**关键字</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列</span>
<span class="token comment">-- 方法一:使用连接查询</span>
<span class="token keyword">SELECT</span> studentno<span class="token punctuation">,</span>r<span class="token punctuation">.</span>subjectno<span class="token punctuation">,</span>StudentResult
<span class="token keyword">FROM</span> result r
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">\`</span>subject<span class="token punctuation">\`</span></span> sub
<span class="token keyword">ON</span> r<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>SubjectNo<span class="token punctuation">\`</span></span><span class="token operator">=</span>sub<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>SubjectNo<span class="token punctuation">\`</span></span>
<span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">&#39;数据库结构-1&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> studentresult <span class="token keyword">DESC</span><span class="token punctuation">;</span>

<span class="token comment">-- 方法二:使用子查询(执行顺序:由里及外)</span>
<span class="token keyword">SELECT</span> studentno<span class="token punctuation">,</span>subjectno<span class="token punctuation">,</span>StudentResult
<span class="token keyword">FROM</span> result
<span class="token keyword">WHERE</span> subjectno<span class="token operator">=</span><span class="token punctuation">(</span>
   <span class="token keyword">SELECT</span> subjectno <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>subject<span class="token punctuation">\`</span></span>
   <span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">&#39;数据库结构-1&#39;</span>
<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> studentresult <span class="token keyword">DESC</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名</span>
<span class="token comment">-- 方法一:使用连接查询</span>
<span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span>studentname
<span class="token keyword">FROM</span> student s
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> result r
<span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>StudentNo<span class="token punctuation">\`</span></span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>StudentNo<span class="token punctuation">\`</span></span>
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">\`</span>subject<span class="token punctuation">\`</span></span> sub
<span class="token keyword">ON</span> sub<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>SubjectNo<span class="token punctuation">\`</span></span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>SubjectNo<span class="token punctuation">\`</span></span>
<span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">&#39;高等数学-2&#39;</span> <span class="token operator">AND</span> StudentResult<span class="token operator">&gt;=</span><span class="token number">80</span>

<span class="token comment">-- 方法二:使用连接查询+子查询</span>
<span class="token comment">-- 分数不小于80分的学生的学号和姓名</span>
<span class="token keyword">SELECT</span> r<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span>studentname <span class="token keyword">FROM</span> student s
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> result r <span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>StudentNo<span class="token punctuation">\`</span></span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>StudentNo<span class="token punctuation">\`</span></span>
<span class="token keyword">WHERE</span> StudentResult<span class="token operator">&gt;=</span><span class="token number">80</span>

<span class="token comment">-- 在上面SQL基础上,添加需求:课程为 高等数学-2</span>
<span class="token keyword">SELECT</span> r<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span>studentname <span class="token keyword">FROM</span> student s
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> result r <span class="token keyword">ON</span> s<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>StudentNo<span class="token punctuation">\`</span></span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>StudentNo<span class="token punctuation">\`</span></span>
<span class="token keyword">WHERE</span> StudentResult<span class="token operator">&gt;=</span><span class="token number">80</span> <span class="token operator">AND</span> subjectno<span class="token operator">=</span><span class="token punctuation">(</span>
   <span class="token keyword">SELECT</span> subjectno <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>subject<span class="token punctuation">\`</span></span>
   <span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">&#39;高等数学-2&#39;</span>
<span class="token punctuation">)</span>

<span class="token comment">-- 方法三:使用子查询</span>
<span class="token comment">-- 分步写简单sql语句,然后将其嵌套起来</span>
<span class="token keyword">SELECT</span> studentno<span class="token punctuation">,</span>studentname <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> studentno <span class="token operator">IN</span><span class="token punctuation">(</span>
   <span class="token keyword">SELECT</span> studentno <span class="token keyword">FROM</span> result <span class="token keyword">WHERE</span> StudentResult<span class="token operator">&gt;=</span><span class="token number">80</span> <span class="token operator">AND</span> subjectno<span class="token operator">=</span><span class="token punctuation">(</span>
       <span class="token keyword">SELECT</span> subjectno <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>subject<span class="token punctuation">\`</span></span> <span class="token keyword">WHERE</span> subjectname <span class="token operator">=</span> <span class="token string">&#39;高等数学-2&#39;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、sql-函数" tabindex="-1"><a class="header-anchor" href="#四、sql-函数" aria-hidden="true">#</a> 四、SQL 函数</h2><h3 id="_1、数据函数" tabindex="-1"><a class="header-anchor" href="#_1、数据函数" aria-hidden="true">#</a> 1、数据函数</h3><blockquote><p>绝对值：<strong><em>select abs(-8)</em></strong></p><p>向上取整：<strong><em>ceiling(8.4)</em></strong></p><p>向下取整：<strong><em>floor(9.4)</em></strong></p><p>随机数（0-1）：<strong><em>rand()</em></strong></p><p>符号函数（负数返回-1、整数返回 1、0 返回 0）：<strong><em>sign(0)</em></strong></p></blockquote><h3 id="_2-字符串函数" tabindex="-1"><a class="header-anchor" href="#_2-字符串函数" aria-hidden="true">#</a> 2.字符串函数</h3><blockquote><p>select char_length(&#39;坚持就能成功&#39;);</p></blockquote><p>返回字符串长度</p><blockquote><p>select concat(&#39;我&#39;,&#39;爱&#39;,&#39;S&#39;,&#39;QL&#39;);</p></blockquote><p>字符合并</p><blockquote><p>select insert(&#39;认真学习，坚持努力&#39;,1,2,&#39;加油继续努力&#39;);</p></blockquote>`,81),l=n(`<p>替换字符串，从指定位置开始替换前面指定长度</p><blockquote><p>select lower(&#39;Dragon&#39;);-----小写</p><p>select upper(&#39;Dragon&#39;);-----大写</p><p>select left(&#39;hello world&#39;,5);------左边截取</p><p>select right(&#39;hello world&#39;,4);------右边截取</p><p>select replace(&#39;坚持就能成功&#39;,&#39;成功&#39;，‘success’);-----替换字符串</p><p>select substr(&#39;坚持就能成功,认真才能实现梦想&#39;,4,6);-----截取字符串</p><p>select reverse(&#39;好好学习，认真学习&#39;);------反转</p></blockquote><p>案例----查询姓找的同学改为赵</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>stu_name<span class="token punctuation">,</span><span class="token string">&#39;找&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;赵&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> new_name <span class="token keyword">from</span> student <span class="token keyword">where</span> stu_name <span class="token operator">like</span> <span class="token string">&#39;找%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-日期和时间函数" tabindex="-1"><a class="header-anchor" href="#_3-日期和时间函数" aria-hidden="true">#</a> 3.日期和时间函数</h3><blockquote><p>SELECT CURRENT*DATE(); /<em>获取当前日期</em>/ SELECT CURDATE(); /<em>获取当前日期</em>/ SELECT NOW(); /<em>获取当前日期和时间</em>/ SELECT LOCALTIME(); /<em>获取当前日期和时间</em>/ SELECT SYSDATE(); /*获取当前日期和时间_/</p></blockquote><blockquote><p>-- 获取年月日,时分秒 SELECT YEAR(NOW()); SELECT MONTH(NOW()); SELECT DAY(NOW()); SELECT HOUR(NOW()); SELECT MINUTE(NOW()); SELECT SECOND(NOW());</p></blockquote><h3 id="_4-系统信息函数" tabindex="-1"><a class="header-anchor" href="#_4-系统信息函数" aria-hidden="true">#</a> 4.系统信息函数</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-聚合函数" tabindex="-1"><a class="header-anchor" href="#_5-聚合函数" aria-hidden="true">#</a> 5.聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足 Select 条件的记录总和数，如 select count(_) 【不建议使用 _，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 聚合函数</span>
 <span class="token comment">/*COUNT:非空的*/</span>
 <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>studentname<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
 <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
 <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>  <span class="token comment">/*推荐*/</span>

 <span class="token comment">-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。</span>
 <span class="token comment">-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</span>
 <span class="token comment">-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</span>
 <span class="token comment">-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。</span>
 <span class="token comment">/*
 很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。

 下面它们之间的一些对比：

 1）在表没有主键时，count(1)比count(*)快
 2）有主键时，主键作为计算条件，count(主键)效率最高；
 3）若表格只有一个字段，则count(*)效率较高。
 */</span>

 <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>StudentResult<span class="token punctuation">)</span> <span class="token keyword">AS</span> 总和 <span class="token keyword">FROM</span> result<span class="token punctuation">;</span>
 <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>StudentResult<span class="token punctuation">)</span> <span class="token keyword">AS</span> 平均分 <span class="token keyword">FROM</span> result<span class="token punctuation">;</span>
 <span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>StudentResult<span class="token punctuation">)</span> <span class="token keyword">AS</span> 最高分 <span class="token keyword">FROM</span> result<span class="token punctuation">;</span>
 <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>StudentResult<span class="token punctuation">)</span> <span class="token keyword">AS</span> 最低分 <span class="token keyword">FROM</span> result<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询不同课程的平均分,最高分,最低分</span>
 <span class="token comment">-- 前提:根据不同的课程进行分组</span>

 <span class="token keyword">SELECT</span> subjectname<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>studentresult<span class="token punctuation">)</span> <span class="token keyword">AS</span> 平均分<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>StudentResult<span class="token punctuation">)</span> <span class="token keyword">AS</span> 最高分<span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>StudentResult<span class="token punctuation">)</span> <span class="token keyword">AS</span> 最低分
 <span class="token keyword">FROM</span> result <span class="token keyword">AS</span> r
 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">\`</span>subject<span class="token punctuation">\`</span></span> <span class="token keyword">AS</span> s
 <span class="token keyword">ON</span> r<span class="token punctuation">.</span>subjectno <span class="token operator">=</span> s<span class="token punctuation">.</span>subjectno
 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> r<span class="token punctuation">.</span>subjectno
 <span class="token keyword">HAVING</span> 平均分<span class="token operator">&gt;</span><span class="token number">80</span><span class="token punctuation">;</span>

 <span class="token comment">/*
 where写在group by前面.
 要是放在分组后面的筛选
 要使用HAVING..
 因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-md5-加密" tabindex="-1"><a class="header-anchor" href="#_6-md5-加密" aria-hidden="true">#</a> 6.MD5 加密</h3><ul><li><p>简介</p><p>MD5 即 Message-Digest Algorithm 5（信息-摘要算法 5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有 MD5 实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5 的前身有 MD2、MD3 和 MD4。</p></li><li><p>实现数据加密</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>testmd5<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>pwd<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
 <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>插入数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> testmd5 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;kuangshen&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;qinjiang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;456789&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>数据加密语法(对 pwd 这一列)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> testmd5 <span class="token keyword">set</span> pwd <span class="token operator">=</span> md5<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>指定加密</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> testmd5 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;kuangshen2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> testmd5 <span class="token keyword">set</span> pwd <span class="token operator">=</span> md5<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;kuangshen2&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>插入新的数据自动加密</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> testmd5 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;kuangshen3&#39;</span><span class="token punctuation">,</span>md5<span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查询登录用户信息（md5 对比使用，查看用户输入加密后的密码进行比对）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> testmd5 <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;kuangshen&#39;</span> <span class="token operator">AND</span> pwd<span class="token operator">=</span>MD5<span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结" aria-hidden="true">#</a> 7.总结</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token comment">-- ================ 内置函数 ================</span>
 <span class="token comment">-- 数值函数</span>
 abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment">-- 绝对值 abs(-10.9) = 10</span>
 <span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> d<span class="token punctuation">)</span>    <span class="token comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span>
 ceil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment">-- 向上取整 ceil(10.1) = 11</span>
 floor<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment">-- 向下取整 floor (10.1) = 10</span>
 <span class="token function">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment">-- 四舍五入去整</span>
 <span class="token function">mod</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token comment">-- m%n m mod n 求余 10%3=1</span>
 pi<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">-- 获得圆周率</span>
 pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token comment">-- m^n</span>
 sqrt<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment">-- 算术平方根</span>
 rand<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">-- 随机数</span>
 <span class="token keyword">truncate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> d<span class="token punctuation">)</span>    <span class="token comment">-- 截取d位小数</span>

 <span class="token comment">-- 时间日期函数</span>
 <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">-- 当前日期时间</span>
 <span class="token keyword">current_date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">-- 当前日期</span>
 <span class="token keyword">current_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">-- 当前时间</span>
 <span class="token keyword">date</span><span class="token punctuation">(</span><span class="token string">&#39;yyyy-mm-dd hh:ii:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">-- 获取日期部分</span>
 <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token string">&#39;yyyy-mm-dd hh:ii:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">-- 获取时间部分</span>
 date_format<span class="token punctuation">(</span><span class="token string">&#39;yyyy-mm-dd hh:ii:ss&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%d %y %a %d %m %b %j&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">-- 格式化时间</span>
 unix_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">-- 获得unix时间戳</span>
 from_unixtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">-- 从时间戳获得时间</span>

 <span class="token comment">-- 字符串函数</span>
 length<span class="token punctuation">(</span>string<span class="token punctuation">)</span>            <span class="token comment">-- string长度，字节</span>
 char_length<span class="token punctuation">(</span>string<span class="token punctuation">)</span>        <span class="token comment">-- string的字符个数</span>
 substring<span class="token punctuation">(</span>str<span class="token punctuation">,</span> position <span class="token punctuation">[</span><span class="token punctuation">,</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">-- 从str的position开始,取length个字符</span>
 <span class="token keyword">replace</span><span class="token punctuation">(</span>str <span class="token punctuation">,</span>search_str <span class="token punctuation">,</span>replace_str<span class="token punctuation">)</span>    <span class="token comment">-- 在str中用replace_str替换search_str</span>
 instr<span class="token punctuation">(</span>string <span class="token punctuation">,</span>substring<span class="token punctuation">)</span>    <span class="token comment">-- 返回substring首次在string中出现的位置</span>
 concat<span class="token punctuation">(</span>string <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">-- 连接字串</span>
 <span class="token keyword">charset</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>            <span class="token comment">-- 返回字串字符集</span>
 <span class="token function">lcase</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>            <span class="token comment">-- 转换成小写</span>
 <span class="token keyword">left</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token comment">-- 从string2中的左边起取length个字符</span>
 load_file<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>    <span class="token comment">-- 从文件读取内容</span>
 locate<span class="token punctuation">(</span>substring<span class="token punctuation">,</span> string <span class="token punctuation">[</span><span class="token punctuation">,</span>start_position<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">-- 同instr,但可指定开始位置</span>
 lpad<span class="token punctuation">(</span>string<span class="token punctuation">,</span> length<span class="token punctuation">,</span> pad<span class="token punctuation">)</span>    <span class="token comment">-- 重复用pad加在string开头,直到字串长度为length</span>
 ltrim<span class="token punctuation">(</span>string<span class="token punctuation">)</span>            <span class="token comment">-- 去除前端空格</span>
 <span class="token keyword">repeat</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token comment">-- 重复count次</span>
 rpad<span class="token punctuation">(</span>string<span class="token punctuation">,</span> length<span class="token punctuation">,</span> pad<span class="token punctuation">)</span>    <span class="token comment">--在str后用pad补充,直到长度为length</span>
 rtrim<span class="token punctuation">(</span>string<span class="token punctuation">)</span>            <span class="token comment">-- 去除后端空格</span>
 strcmp<span class="token punctuation">(</span>string1 <span class="token punctuation">,</span>string2<span class="token punctuation">)</span>    <span class="token comment">-- 逐字符比较两字串大小</span>

 <span class="token comment">-- 聚合函数</span>
 <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 group_concat<span class="token punctuation">(</span><span class="token punctuation">)</span>

 <span class="token comment">-- 其他常用函数</span>
 md5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="五、事物和索引" tabindex="-1"><a class="header-anchor" href="#五、事物和索引" aria-hidden="true">#</a> 五、事物和索引</h2><h3 id="_1-事物" tabindex="-1"><a class="header-anchor" href="#_1-事物" aria-hidden="true">#</a> 1.事物</h3><ul><li><p><strong>事物的概念</strong></p><ul><li><p>将一组 SQL 语句放在一起同一批去处理，若其中有一个语句出错，则所有 SQL 都将被取消执行</p></li><li><p>MySQL 事物处理只支持 InnoDB 和 BDB 数据表类型</p></li></ul></li><li><p><strong>原子性</strong></p><ul><li>整个事物的所有操作，要么全部完成，要不都不完成，不可能停留在中间环节，若在执行过程中发生错误，则会被回滚到事物开始前的状态</li></ul></li><li><p><strong>一致性</strong></p><ul><li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是 100 元，那么五个账户总额是 500 元，如果在这个 5 个账户之间同时发生多个转账，无论并发多少个，比如在 A 与 B 账户之间转账 5 元，在 C 与 D 账户之间转账 10 元，在 B 与 E 之间转账 15 元，五个账户总额也应该还是 500 元，这就是保护性和不变性</li></ul></li><li><p><strong>隔离性</strong></p><ul><li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li></ul></li><li><p><strong>持久性</strong></p><ul><li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li></ul></li></ul><blockquote><p>基本语法</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 使用set语句来改变自动提交模式</span>
<span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">/*关闭*/</span>
<span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">/*开启*/</span>

<span class="token comment">-- 注意:</span>
<span class="token comment">--- 1.MySQL中默认是自动提交</span>
<span class="token comment">--- 2.使用事务时应先关闭自动提交</span>

<span class="token comment">-- 开始一个事务,标记事务的起始点</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span>

<span class="token comment">-- 提交一个事务给数据库</span>
<span class="token keyword">COMMIT</span>

<span class="token comment">-- 将事务回滚,数据回到本次事务的初始状态</span>
<span class="token keyword">ROLLBACK</span>

<span class="token comment">-- 还原MySQL数据库的自动提交</span>
<span class="token keyword">SET</span> autocommit <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 保存点</span>
<span class="token keyword">SAVEPOINT</span> 保存点名称 <span class="token comment">-- 设置一个事务保存点</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> <span class="token keyword">SAVEPOINT</span> 保存点名称 <span class="token comment">-- 回滚到保存点</span>
<span class="token keyword">RELEASE</span> <span class="token keyword">SAVEPOINT</span> 保存点名称 <span class="token comment">-- 删除保存点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>题目练习</p></blockquote><ul><li><p>A 在线买一款价格为 500 元商品,网上银行转账. A 的银行卡余额为 2000,然后给商家 B 支付 500. 商家 B 一开始的银行卡余额为 10000</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>account<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>cash<span class="token punctuation">\`</span></span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>cash<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span><span class="token number">10000.00</span><span class="token punctuation">)</span>

<span class="token comment">-- 转账实现</span>
<span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">-- 关闭自动提交</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>  <span class="token comment">-- 开始一个事务,标记事务的起始点</span>
<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> cash<span class="token operator">=</span>cash<span class="token operator">-</span><span class="token number">500</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> cash<span class="token operator">=</span>cash<span class="token operator">+</span><span class="token number">500</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token comment">-- 提交事务</span>
<span class="token comment"># rollback;</span>
<span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 恢复自动提交</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-索引" tabindex="-1"><a class="header-anchor" href="#_2-索引" aria-hidden="true">#</a> 2.索引</h3><blockquote><p>索引的引用</p></blockquote><ul><li>提高查询速度</li><li>确保数据唯一性</li><li>可以加速表和表之间的连接，实现表与表之间的参照完整性</li><li>使用分组和排序子句进行数据检索，可以显著减少分组和排序的时间</li><li>全文检索字段进行搜索优化</li></ul><blockquote><p>分类</p></blockquote><ul><li>主键索引（Primary Key）</li><li>唯一索引（Unique）</li><li>常规索引（Index）</li><li>全文索引（FullText）</li></ul><blockquote><p>主键索引</p></blockquote><p>主键：第一个属性组能唯一标识一条记录</p><p>特点：</p><ul><li>最常见的索引类型</li><li>确保数据记录唯一性</li><li>确定特定数据记录在数据库中的位置</li></ul><blockquote><p>唯一索引</p></blockquote><p>作用：避免同一个表中某数据列中的值重复</p><p>与主键索引的区别</p><ul><li>主键索引只能有一个</li><li>唯一索引可能有多个</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>Grade<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>GradeID<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">AUTO_INCREMENT</span> PRIMARYKEY<span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>GradeName<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span>
   <span class="token comment">-- 或 UNIQUE KEY \`GradeID\` (\`GradeID\`)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>常规索引</p></blockquote><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>index 和 key 关键字都可以设置常规索引</li><li>应加在查询找条件的字段</li><li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>result<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>
   <span class="token comment">-- 省略一些代码</span>
  <span class="token keyword">INDEX</span><span class="token operator">/</span><span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>ind<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>studentNo<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>subjectNo<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token comment">-- 创建表时添加</span>
<span class="token punctuation">)</span>
<span class="token comment">-- 创建后添加</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>result<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">\`</span>ind<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>studentNo<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>subjectNo<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>全文索引</p></blockquote><p>百度搜索：全文索引</p><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>只能用于 MyISAM 类型的数据表</li><li>只能用于 CHAR , VARCHAR , TEXT 数据列类型</li><li>适合大型数据集</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
#方法一：创建表时
  　　CREATE TABLE 表名 (
               字段名1 数据类型 [完整性约束条件…],
               字段名2 数据类型 [完整性约束条件…],
               [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY
               [索引名] (字段名[(长度)] [ASC |DESC])
               );


#方法二：CREATE在已存在的表上创建索引
       CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名
                    ON 表名 (字段名[(长度)] [ASC |DESC]) ;


#方法三：ALTER TABLE在已存在的表上创建索引
       ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX
                            索引名 (字段名[(长度)] [ASC |DESC]) ;


#删除索引：DROP INDEX 索引名 ON 表名字;
#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;


#显示索引信息: SHOW INDEX FROM student;
*/</span>

<span class="token comment">/*增加全文索引*/</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>school<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> FULLTEXT <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">\`</span>studentname<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>StudentName<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*EXPLAIN : 分析SQL语句执行性能*/</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> studentno<span class="token operator">=</span><span class="token string">&#39;1000&#39;</span><span class="token punctuation">;</span>

<span class="token comment">/*使用全文索引*/</span>
<span class="token comment">-- 全文搜索通过 MATCH() 函数完成。</span>
<span class="token comment">-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span>studentname<span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span><span class="token string">&#39;love&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
开始之前，先说一下全文索引的版本、存储引擎、数据类型的支持情况

MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；
MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;
只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。
测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>拓展：测试索引</p></blockquote><p><strong>建表 app_user：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>app_user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户昵称&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户邮箱&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>phone<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;手机号&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>gender<span class="token punctuation">\`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;性别（0:男；1：女）&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>password<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>update_time<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;app用户表&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>批量插入数据：100w</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">FUNCTION</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> mock_data<span class="token punctuation">;</span>
<span class="token keyword">DELIMITER</span> $$
<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> mock_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">RETURNS</span> <span class="token keyword">INT</span>
<span class="token keyword">BEGIN</span>
<span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1000000</span><span class="token punctuation">;</span>
<span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">WHILE</span> i <span class="token operator">&lt;</span> num <span class="token keyword">DO</span>
  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> app_user<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>phone<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>gender<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>password<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
   <span class="token keyword">VALUES</span><span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;用户&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;24736743@qq.com&#39;</span><span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;18&#39;</span><span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">999999999</span><span class="token operator">-</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>
<span class="token keyword">RETURN</span> i<span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> mock_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>索引效率测试</strong></p><p>无索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;用户9999&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 查看耗时</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;用户9999&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;用户9999&#39;</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;用户9999&#39;</span>\\G
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
          id: <span class="token number">1</span>
select_type: <span class="token keyword">SIMPLE</span>
       <span class="token keyword">table</span>: app_user
  partitions: <span class="token boolean">NULL</span>
        <span class="token keyword">type</span>: <span class="token keyword">ALL</span>
possible_keys: <span class="token boolean">NULL</span>
        <span class="token keyword">key</span>: <span class="token boolean">NULL</span>
    key_len: <span class="token boolean">NULL</span>
        ref: <span class="token boolean">NULL</span>
        <span class="token keyword">rows</span>: <span class="token number">992759</span>
    filtered: <span class="token number">10.00</span>
      Extra: <span class="token keyword">Using</span> <span class="token keyword">where</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_app_user_name <span class="token keyword">ON</span> app_user<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试普通索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;用户9999&#39;</span>\\G
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
          id: <span class="token number">1</span>
select_type: <span class="token keyword">SIMPLE</span>
       <span class="token keyword">table</span>: app_user
  partitions: <span class="token boolean">NULL</span>
        <span class="token keyword">type</span>: ref
possible_keys: idx_app_user_name
        <span class="token keyword">key</span>: idx_app_user_name
    key_len: <span class="token number">203</span>
        ref: const
        <span class="token keyword">rows</span>: <span class="token number">1</span>
    filtered: <span class="token number">100.00</span>
      Extra: <span class="token boolean">NULL</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;用户9999&#39;</span><span class="token punctuation">;</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;用户9999&#39;</span><span class="token punctuation">;</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> app_user <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;用户9999&#39;</span><span class="token punctuation">;</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>索引准则</p></blockquote><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表建议不要加索引</li><li>索引一般应加在查找条件的字段</li></ul><blockquote><p>索引的数据结构</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类</span>
<span class="token keyword">hash</span>类型的索引：查询单条快，范围查询慢
<span class="token keyword">btree</span>类型的索引：b<span class="token operator">+</span>树，层数越多，数据量指数级增长（我们就用它，因为<span class="token keyword">innodb</span>默认支持它）

<span class="token comment">-- 不同的存储引擎支持的索引类型也不一样</span>
<span class="token keyword">InnoDB</span> 支持事务，支持行级别锁定，支持 B<span class="token operator">-</span>tree、<span class="token keyword">Full</span><span class="token operator">-</span><span class="token keyword">text</span> 等索引，不支持 <span class="token keyword">Hash</span> 索引；
MyISAM 不支持事务，支持表级别锁定，支持 B<span class="token operator">-</span>tree、<span class="token keyword">Full</span><span class="token operator">-</span><span class="token keyword">text</span> 等索引，不支持 <span class="token keyword">Hash</span> 索引；
Memory 不支持事务，支持表级别锁定，支持 B<span class="token operator">-</span>tree、<span class="token keyword">Hash</span> 等索引，不支持 <span class="token keyword">Full</span><span class="token operator">-</span><span class="token keyword">text</span> 索引；
NDB 支持事务，支持行级别锁定，支持 <span class="token keyword">Hash</span> 索引，不支持 B<span class="token operator">-</span>tree、<span class="token keyword">Full</span><span class="token operator">-</span><span class="token keyword">text</span> 等索引；
Archive 不支持事务，支持表级别锁定，不支持 B<span class="token operator">-</span>tree、<span class="token keyword">Hash</span>、<span class="token keyword">Full</span><span class="token operator">-</span><span class="token keyword">text</span> 等索引；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、权限及如何设计数据库" tabindex="-1"><a class="header-anchor" href="#六、权限及如何设计数据库" aria-hidden="true">#</a> 六、权限及如何设计数据库</h2><h3 id="_1-用户管理" tabindex="-1"><a class="header-anchor" href="#_1-用户管理" aria-hidden="true">#</a> 1.用户管理</h3><blockquote><p>基本命令</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/* 用户和权限管理 */</span> <span class="token comment">------------------</span>
用户信息表：mysql<span class="token punctuation">.</span><span class="token keyword">user</span>

<span class="token comment">-- 刷新权限</span>
FLUSH <span class="token keyword">PRIVILEGES</span>

<span class="token comment">-- 增加用户 CREATE USER kuangshen IDENTIFIED BY &#39;123456&#39;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> 用户名 IDENTIFIED <span class="token keyword">BY</span> <span class="token punctuation">[</span>PASSWORD<span class="token punctuation">]</span> 密码<span class="token punctuation">(</span>字符串<span class="token punctuation">)</span>
  <span class="token operator">-</span> 必须拥有mysql数据库的全局<span class="token keyword">CREATE</span> <span class="token keyword">USER</span>权限，或拥有<span class="token keyword">INSERT</span>权限。
  <span class="token operator">-</span> 只能创建用户，不能赋予权限。
  <span class="token operator">-</span> 用户名，注意引号：如 <span class="token string">&#39;user_name&#39;</span><span class="token variable">@&#39;192.168.1.1&#39;</span>
  <span class="token operator">-</span> 密码也需引号，纯数字密码也要加引号
  <span class="token operator">-</span> 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD<span class="token punctuation">(</span><span class="token punctuation">)</span>函数返回的混编值，需包含关键字PASSWORD

<span class="token comment">-- 重命名用户 RENAME USER kuangshen TO kuangshen2</span>
<span class="token keyword">RENAME</span> <span class="token keyword">USER</span> old_user <span class="token keyword">TO</span> new_user

<span class="token comment">-- 设置密码</span>
<span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">&#39;密码&#39;</span><span class="token punctuation">)</span>    <span class="token comment">-- 为当前用户设置密码</span>
<span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> 用户名 <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">&#39;密码&#39;</span><span class="token punctuation">)</span>    <span class="token comment">-- 为指定用户设置密码</span>

<span class="token comment">-- 删除用户 DROP USER kuangshen2</span>
<span class="token keyword">DROP</span> <span class="token keyword">USER</span> 用户名

<span class="token comment">-- 分配权限/添加用户</span>
<span class="token keyword">GRANT</span> 权限列表 <span class="token keyword">ON</span> 表名 <span class="token keyword">TO</span> 用户名 <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token punctuation">[</span>PASSWORD<span class="token punctuation">]</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">]</span>
  <span class="token operator">-</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> 表示所有权限
  <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> 表示所有库的所有表
  <span class="token operator">-</span> 库名<span class="token punctuation">.</span>表名 表示某库下面的某表

<span class="token comment">-- 查看权限   SHOW GRANTS FOR root@localhost;</span>
<span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> 用户名
   <span class="token comment">-- 查看当前用户权限</span>
  <span class="token keyword">SHOW</span> GRANTS<span class="token punctuation">;</span> 或 <span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token keyword">CURRENT_USER</span><span class="token punctuation">;</span> 或 <span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token keyword">CURRENT_USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 撤消权限</span>
<span class="token keyword">REVOKE</span> 权限列表 <span class="token keyword">ON</span> 表名 <span class="token keyword">FROM</span> 用户名
<span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span><span class="token punctuation">,</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span> <span class="token keyword">FROM</span> 用户名    <span class="token comment">-- 撤销所有权限</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>权限解释</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 权限列表</span>
<span class="token keyword">ALL</span> <span class="token punctuation">[</span><span class="token keyword">PRIVILEGES</span><span class="token punctuation">]</span>    <span class="token comment">-- 设置除GRANT OPTION之外的所有简单权限</span>
<span class="token keyword">ALTER</span>    <span class="token comment">-- 允许使用ALTER TABLE</span>
<span class="token keyword">ALTER</span> <span class="token keyword">ROUTINE</span>    <span class="token comment">-- 更改或取消已存储的子程序</span>
<span class="token keyword">CREATE</span>    <span class="token comment">-- 允许使用CREATE TABLE</span>
<span class="token keyword">CREATE</span> <span class="token keyword">ROUTINE</span>    <span class="token comment">-- 创建已存储的子程序</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLES</span>        <span class="token comment">-- 允许使用CREATE TEMPORARY TABLE</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span>        <span class="token comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span>
<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span>        <span class="token comment">-- 允许使用CREATE VIEW</span>
<span class="token keyword">DELETE</span>    <span class="token comment">-- 允许使用DELETE</span>
<span class="token keyword">DROP</span>    <span class="token comment">-- 允许使用DROP TABLE</span>
<span class="token keyword">EXECUTE</span>        <span class="token comment">-- 允许用户运行已存储的子程序</span>
<span class="token keyword">FILE</span>    <span class="token comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span>
<span class="token keyword">INDEX</span>     <span class="token comment">-- 允许使用CREATE INDEX和DROP INDEX</span>
<span class="token keyword">INSERT</span>    <span class="token comment">-- 允许使用INSERT</span>
<span class="token keyword">LOCK</span> <span class="token keyword">TABLES</span>        <span class="token comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span>
PROCESS     <span class="token comment">-- 允许使用SHOW FULL PROCESSLIST</span>
<span class="token keyword">REFERENCES</span>    <span class="token comment">-- 未被实施</span>
RELOAD    <span class="token comment">-- 允许使用FLUSH</span>
<span class="token keyword">REPLICATION</span> CLIENT    <span class="token comment">-- 允许用户询问从属服务器或主服务器的地址</span>
<span class="token keyword">REPLICATION</span> SLAVE    <span class="token comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span>
<span class="token keyword">SELECT</span>    <span class="token comment">-- 允许使用SELECT</span>
<span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span>    <span class="token comment">-- 显示所有数据库</span>
<span class="token keyword">SHOW</span> <span class="token keyword">VIEW</span>    <span class="token comment">-- 允许使用SHOW CREATE VIEW</span>
<span class="token keyword">SHUTDOWN</span>    <span class="token comment">-- 允许使用mysqladmin shutdown</span>
SUPER    <span class="token comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span>
<span class="token keyword">UPDATE</span>    <span class="token comment">-- 允许使用UPDATE</span>
<span class="token keyword">USAGE</span>    <span class="token comment">-- “无权限”的同义词</span>
<span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span>    <span class="token comment">-- 允许授予权限</span>


<span class="token comment">/* 表维护 */</span>

<span class="token comment">-- 分析和存储表的关键字分布</span>
<span class="token keyword">ANALYZE</span> <span class="token punctuation">[</span><span class="token keyword">LOCAL</span> <span class="token operator">|</span> NO_WRITE_TO_BINLOG<span class="token punctuation">]</span> <span class="token keyword">TABLE</span> 表名 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">-- 检查一个或多个表是否有错误</span>
<span class="token keyword">CHECK</span> <span class="token keyword">TABLE</span> tbl_name <span class="token punctuation">[</span><span class="token punctuation">,</span> tbl_name<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">option</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">option</span> <span class="token operator">=</span> {<span class="token keyword">QUICK</span> <span class="token operator">|</span> FAST <span class="token operator">|</span> MEDIUM <span class="token operator">|</span> <span class="token keyword">EXTENDED</span> <span class="token operator">|</span> CHANGED}
<span class="token comment">-- 整理数据文件的碎片</span>
<span class="token keyword">OPTIMIZE</span> <span class="token punctuation">[</span><span class="token keyword">LOCAL</span> <span class="token operator">|</span> NO_WRITE_TO_BINLOG<span class="token punctuation">]</span> <span class="token keyword">TABLE</span> tbl_name <span class="token punctuation">[</span><span class="token punctuation">,</span> tbl_name<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-mysql-备份" tabindex="-1"><a class="header-anchor" href="#_2-mysql-备份" aria-hidden="true">#</a> 2.MySQL 备份</h3><p>数据库备份必要性</p><ul><li>保证重要数据不丢失</li><li>数据转移</li></ul><p>MySQL 数据库备份方法</p><ul><li>mysqldump 备份工具</li><li>数据库管理工具,如 SQLyog</li><li>直接拷贝数据库文件和相关配置文件</li></ul><p><strong>mysqldump 客户端</strong></p><p>作用 :</p><ul><li>转储数据库</li><li>搜集数据库进行备份</li><li>将数据转移到另一个 SQL 服务器,不一定是 MySQL 服务器</li></ul><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Jf7deolwQa44rXvicIhXZ0NzgWJWeyYYcf1Dy3ibfN66SiaZQmqTF3Hv8HBjr1zIowXh201pEjUzyJw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 导出</span>
<span class="token number">1.</span> 导出一张表 <span class="token comment">-- mysqldump -uroot -p123456 school student &gt;D:/a.sql</span>
　　mysqldump <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p密码 库名 表名 <span class="token operator">&gt;</span> 文件名<span class="token punctuation">(</span>D:<span class="token operator">/</span>a<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">)</span>
<span class="token number">2.</span> 导出多张表 <span class="token comment">-- mysqldump -uroot -p123456 school student result &gt;D:/a.sql</span>
　　mysqldump <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p密码 库名 表<span class="token number">1</span> 表<span class="token number">2</span> 表<span class="token number">3</span> <span class="token operator">&gt;</span> 文件名<span class="token punctuation">(</span>D:<span class="token operator">/</span>a<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">)</span>
<span class="token number">3.</span> 导出所有表 <span class="token comment">-- mysqldump -uroot -p123456 school &gt;D:/a.sql</span>
　　mysqldump <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p密码 库名 <span class="token operator">&gt;</span> 文件名<span class="token punctuation">(</span>D:<span class="token operator">/</span>a<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">)</span>
<span class="token number">4.</span> 导出一个库 <span class="token comment">-- mysqldump -uroot -p123456 -B school &gt;D:/a.sql</span>
　　mysqldump <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p密码 <span class="token operator">-</span>B 库名 <span class="token operator">&gt;</span> 文件名<span class="token punctuation">(</span>D:<span class="token operator">/</span>a<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">)</span>

可以<span class="token operator">-</span>w携带备份条件

<span class="token comment">-- 导入</span>
<span class="token number">1.</span> 在登录mysql的情况下：<span class="token comment">-- source D:/a.sql</span>
　　source 备份文件
<span class="token number">2.</span> 在不登录的情况下
　　mysql <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p密码 库名 <span class="token operator">&lt;</span> 备份文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-规范化数据库设计" tabindex="-1"><a class="header-anchor" href="#_3-规范化数据库设计" aria-hidden="true">#</a> 3.规范化数据库设计</h3><p><strong>为什么需要数据库设计</strong></p><p><strong>当数据库比较复杂时我们需要设计数据库</strong></p><p><strong>糟糕的数据库设计 :</strong></p><ul><li>数据冗余,存储空间浪费</li><li>数据更新和插入的异常</li><li>程序性能差</li></ul><p><strong>良好的数据库设计 :</strong></p><ul><li><p>节省数据的存储空间</p></li><li><p>能够保证数据的完整性</p></li><li><p>方便进行数据库应用系统的开发</p><p><strong>软件项目开发周期中数据库设计 :</strong></p></li><li><p>需求分析阶段: 分析客户的业务和数据处理需求</p></li><li><p>概要设计阶段:设计数据库的 E-R 模型图 , 确认需求信息的正确和完整.</p></li></ul><p><strong>设计数据库步骤</strong></p><ul><li><p>收集信息</p></li><li><ul><li>与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务.</li></ul></li><li><p>标识实体[Entity]</p></li><li></li><li><ul><li>标识数据库要管理的关键对象或实体,实体一般是名词</li></ul></li><li><p>标识每个实体需要存储的详细信息[Attribute]</p></li><li><p>标识实体之间的关系[Relationship]</p></li></ul><h3 id="_4-三大范式" tabindex="-1"><a class="header-anchor" href="#_4-三大范式" aria-hidden="true">#</a> 4.三大范式</h3><p><strong>问题 : 为什么需要数据规范化?</strong></p><p>不合规范的表设计会导致的问题：</p><ul><li><p>信息重复</p></li><li><p>更新异常</p></li><li><p>插入异常</p></li><li><ul><li>无法正确表示信息</li></ul></li><li><p>删除异常</p></li><li><ul><li>丢失有效信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p><strong>第一范式 (1st NF)</strong></p><p>第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式</p><p><strong>第二范式(2nd NF)</strong></p><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p><p>第二范式消除部分依赖，要求一张表中的每一列都完全依赖于主键（针对于组合主键）</p><p><strong>第三范式(3rd NF)</strong></p><p>如果一个关系满足第二范式,并且除了主键以外的其他列，都不传递依赖于主键列,则满足第三范式.</p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p><strong>规范化和性能的关系</strong></p><p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p><p>在数据规范化的同时 , 要综合考虑数据库的性能</p><p>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间</p><p>通过在给定的表中插入计算列,以方便查询</p>`,106);function c(i,r){return a(),e("div",null,[o,p(" ![image-20220325144754945](C:\\Users\\Sni\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220325144754945.png) "),l])}const k=s(t,[["render",c],["__file","初识MySQL.html.vue"]]);export{k as default};
