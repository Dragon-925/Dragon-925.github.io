import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as e,a as o,b as i}from"./app-T1Dul0fh.js";const r={},s=o("h1",{id:"《spring-boot-自动配置》",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#《spring-boot-自动配置》","aria-hidden":"true"},"#"),i(" 《Spring Boot 自动配置》")],-1),a=o("p",null,[o("img",{src:"https://pic.imgdb.cn/item/65a8b862871b83018a9b062f.png"})],-1),c=o("p",null," 简单来说，就是将第三方的组件，配置到我们的IOC容器中。在这个过程不需要开发人员去编写相关配置，实现方式就是在启动类中标注@SpringBootApplication注解",-1),l=o("p",null,"而@SpringBootApplication注解又是一个复合注解，实际上实现自动配置的注解是@EnableAutoConfiguration注解，具体实现主要有3点：",-1),_=o("ul",null,[o("ol",null,"1.引入start第三方组件，一定要被@Configuration注解标注，其次必须要用@Bean注解标注注入IOC容器的Bean对象"),o("ol",null,"2.再使用约定大于配置的理念，将第三方的start的配置类全路径，写到MEAT-INF/spring.factories文件中"),o("ol",null,"3.Spring Boot在拿到第三方jar包后，根据ImportSelector接口去动态选择加载，从而完成自动配置")],-1),p=o("p",null,[o("img",{src:"https://pic.imgdb.cn/item/65a8b862871b83018a9b04ec.png"})],-1),d=[s,a,c,l,_,p];function u(g,h){return n(),e("div",null,d)}const f=t(r,[["render",u],["__file","SpringBoot自动配置.html.vue"]]);export{f as default};
