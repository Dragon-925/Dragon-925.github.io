const n=JSON.parse('{"key":"v-21b9e513","path":"/language/Boot/Interceptor.html","title":"《Boot 之 Interceptor》","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2020-01-25T00:00:00.000Z","category":["Java","Spring Boot"],"tag":["Boot原理","拦截器"]},"headers":[{"level":2,"title":"1.概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2.创建拦截器","slug":"_2-创建拦截器","link":"#_2-创建拦截器","children":[]},{"level":2,"title":"3.全局跨域","slug":"_3-全局跨域","link":"#_3-全局跨域","children":[]}],"git":{},"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"language/Boot/Interceptor.md","localizedDate":"2020年1月25日","excerpt":"<h1> 《Boot 之 Interceptor》</h1>\\n<h2> 1.概述</h2>\\n<p>对访问路径进行拦截和放行的，底层使用的是 java 反射机制（动态代理）</p>\\n<h2> 2.创建拦截器</h2>\\n<ol>\\n<li>\\n<p>创建拦截类</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>web<span class=\\"token punctuation\\">.</span>servlet<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">HandlerInterceptor</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>web<span class=\\"token punctuation\\">.</span>servlet<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ModelAndView</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>servlet<span class=\\"token punctuation\\">.</span>http<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">HttpServletRequest</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>servlet<span class=\\"token punctuation\\">.</span>http<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">HttpServletResponse</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Date</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">/*\\n实现HandlerInterceptor接口\\n重写方法\\n*/</span>\\n<span class=\\"token annotation punctuation\\">@Component</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">LoginInterceptor</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">HandlerInterceptor</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">/*\\n    该方法，处于controller之前执行，进行对请求地址的拦截\\n    true为放行，false为拦截\\n    */</span>\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">preHandle</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpServletRequest</span> request<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">HttpServletResponse</span> response<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span> handler<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"preHandle:\\"</span> <span class=\\"token operator\\">+</span> request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getRequestURL</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//判断名为user的session是否为null</span>\\n        <span class=\\"token comment\\">//是则false</span>\\n        <span class=\\"token comment\\">//否是true</span>\\n        <span class=\\"token keyword\\">return</span> request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getSession</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAttribute</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"user\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token comment\\">/*\\n\\t处于controller完毕后，做的一些改动，比如返回前端值为5，可以在这里更改为6\\n\\t*/</span>\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">postHandle</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpServletRequest</span> request<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">HttpServletResponse</span> response<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span> handler<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ModelAndView</span> modelAndView<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"postHandle:\\"</span> <span class=\\"token operator\\">+</span> request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getRequestURL</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token comment\\">/*\\n\\t释放内存，清理内存变量\\n\\t*/</span>\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">afterCompletion</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpServletRequest</span> request<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">HttpServletResponse</span> response<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span> handler<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Exception</span> ex<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"afterCompletion:\\"</span> <span class=\\"token operator\\">+</span> request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getRequestURL</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>创建配置类</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>dragon<span class=\\"token punctuation\\">.</span>interceptor<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">LoginInterceptor</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">lombok<span class=\\"token punctuation\\">.</span>extern<span class=\\"token punctuation\\">.</span>slf4j<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Slf4j</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>context<span class=\\"token punctuation\\">.</span>annotation<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Configuration</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>web<span class=\\"token punctuation\\">.</span>servlet<span class=\\"token punctuation\\">.</span>config<span class=\\"token punctuation\\">.</span>annotation<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">InterceptorRegistry</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>web<span class=\\"token punctuation\\">.</span>servlet<span class=\\"token punctuation\\">.</span>config<span class=\\"token punctuation\\">.</span>annotation<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">WebMvcConfigurer</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>annotation<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Resource</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token annotation punctuation\\">@Slf4j</span>\\n<span class=\\"token annotation punctuation\\">@Configuration</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyWebMvcConfig</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">WebMvcConfigurer</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token annotation punctuation\\">@Resource</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">LoginInterceptor</span> loginInterceptor<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">addInterceptors</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterceptorRegistry</span> registry<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        registry<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addInterceptor</span><span class=\\"token punctuation\\">(</span>loginInterceptor<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addPathPatterns</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/**\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//拦截所有路径</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">excludePathPatterns</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/user/login\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//放行指定路径</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>当用户未登录时，Interceptor 中的 preHandler()返回 false，进行拦截所有路径（除了\\"/user/login\\"）</p>\\n<p>当用户登录成功后，Interceptor 中的 preHandler()返回 true，进行所有路径放行</p>\\n</li>\\n</ol>"}');export{n as data};
