import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,d as e}from"./app-KJXbGDVr.js";const t={},p=e(`<h1 id="《反射机制》" tabindex="-1"><a class="header-anchor" href="#《反射机制》" aria-hidden="true">#</a> 《反射机制》</h1><h2 id="一、反射机制概述" tabindex="-1"><a class="header-anchor" href="#一、反射机制概述" aria-hidden="true">#</a> 一、反射机制概述</h2><ul><li><p>单词：<em>Reflection</em></p></li><li><p>因为反射，Java 可以被称作“<strong>准动态语言</strong>”</p><hr></li></ul><h2 id="二、获得反射对象" tabindex="-1"><a class="header-anchor" href="#二、获得反射对象" aria-hidden="true">#</a> 二、获得反射对象</h2><blockquote><p>Class class = Class.forName(&quot;java.lang.String&quot;);</p></blockquote><figure><img src="https://guli-filedragon.oss-cn-zhangjiakou.aliyuncs.com/2022/09/05/img01.png" alt="image-20211226130208120" tabindex="0" loading="lazy"><figcaption>image-20211226130208120</figcaption></figure><h3 id="_1-反射机制提供功能" tabindex="-1"><a class="header-anchor" href="#_1-反射机制提供功能" aria-hidden="true">#</a> 1.反射机制提供功能</h3><ul><li><p>运行时判断任意一个对象所属的类</p></li><li><p>构造任意一个类的对象</p></li><li><p>判断任意一个类所具有的成员变量和方法</p></li><li><p>获取泛型信息</p></li><li><p>调用任意一个对象的成员变量和方法</p></li><li><p>运行时处理注解</p></li><li><p>生成动态代理（AOP）</p><hr></li></ul><h3 id="_2-反射优缺点" tabindex="-1"><a class="header-anchor" href="#_2-反射优缺点" aria-hidden="true">#</a> 2.反射优缺点</h3><blockquote><p>优点：可实现动态创建对象和编译，体现灵活性</p><p>缺点：对性能有影响，使用反射基本上是一种解释操作，我们可以告诉 JVM，我们希望做什么并且它满足我们的需求。这类操作总是慢于直接执行相同操作。</p></blockquote><h2 id="三、得到-clss-对象的几种方式" tabindex="-1"><a class="header-anchor" href="#三、得到-clss-对象的几种方式" aria-hidden="true">#</a> 三、得到 Clss 对象的几种方式</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//第一种方式</span>
<span class="token class-name">Class</span> c0 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.dragon.pojo.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c0<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//第二种方式</span>
<span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//第三种方式</span>
<span class="token class-name">Class</span> c2 <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//第四种方式</span>
<span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//第五种方式</span>
<span class="token class-name">Class</span> c4 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、获取类的运行结构" tabindex="-1"><a class="header-anchor" href="#四、获取类的运行结构" aria-hidden="true">#</a> 四、获取类的运行结构</h2><h3 id="_1-getname" tabindex="-1"><a class="header-anchor" href="#_1-getname" aria-hidden="true">#</a> 1.getName()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-getsimplename" tabindex="-1"><a class="header-anchor" href="#_2-getsimplename" aria-hidden="true">#</a> 2.getSimpleName()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-getdeclaredfields" tabindex="-1"><a class="header-anchor" href="#_3-getdeclaredfields" aria-hidden="true">#</a> 3.getDeclaredFields()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredField <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>该方法获取类全部属性</mark></p><h3 id="_4-getfields" tabindex="-1"><a class="header-anchor" href="#_4-getfields" aria-hidden="true">#</a> 4.getFields()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>declaredField <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>该方法只获取类中 public 属性</mark></p><h3 id="_5-getdeclaredmethods" tabindex="-1"><a class="header-anchor" href="#_5-getdeclaredmethods" aria-hidden="true">#</a> 5.getDeclaredMethods()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>获得该类中的所有方法(protected、public、private、default)</mark></p><h3 id="_6-getmethods" tabindex="-1"><a class="header-anchor" href="#_6-getmethods" aria-hidden="true">#</a> 6.getMethods()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>获得当前类的 public 方法和该类父类中的 public 方法</mark></p><h2 id="反射解释" tabindex="-1"><a class="header-anchor" href="#反射解释" aria-hidden="true">#</a> 反射解释</h2><ul><li><p>反射是一种程序设计技术，它允许程序在运行时动态地检查、调用和修改类、对象、方法和属性等程序的结构和行为。通过反射，我们可以在运行时获取类的信息、创建对象、调用方法、访问属性等。它打破了传统编程模型中需要在编译时明确知道类的结构和方法才能进行操作的限制，使得程序更加灵活和可扩展。</p></li><li><p>在传统的编程模型中，我们通常需要在编译时明确知道类的结构和方法，然后才能进行操作。而反射则打破了这种限制，它允许程序在运行时通过名称、类型等信息来动态地获取和使用类的成员，从而实现对类的结构和行为的动态操作。</p></li></ul>`,31),c=[p];function o(l,i){return n(),s("div",null,c)}const r=a(t,[["render",o],["__file","反射机制.html.vue"]]);export{r as default};
