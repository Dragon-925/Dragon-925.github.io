const e=JSON.parse('{"key":"v-38bd0f0d","path":"/language/Spring/Spring%E4%B9%8BAOP.html","title":"《Spring 之 AOP》","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2019-12-12T00:00:00.000Z","category":["Java","Spring"],"tag":["AOP","IOC容器","动态代理","CGLIB","JDK动态代理"]},"headers":[{"level":3,"title":"AOP 核心概念","slug":"aop-核心概念","link":"#aop-核心概念","children":[]},{"level":3,"title":"JDK 动态代理","slug":"jdk-动态代理","link":"#jdk-动态代理","children":[]},{"level":2,"title":"AOP 切入点表达式","slug":"aop-切入点表达式","link":"#aop-切入点表达式","children":[]},{"level":2,"title":"AOP 通知类型","slug":"aop-通知类型","link":"#aop-通知类型","children":[{"level":3,"title":"AOP 注解","slug":"aop-注解","link":"#aop-注解","children":[]}]},{"level":2,"title":"调用目标参数","slug":"调用目标参数","link":"#调用目标参数","children":[]}],"git":{},"readingTime":{"minutes":3.71,"words":1113},"filePathRelative":"language/Spring/Spring之AOP.md","localizedDate":"2019年12月12日","excerpt":"<h1> 《Spring 之 AOP》</h1>\\n<blockquote>\\n<p>AOP 是什么</p>\\n</blockquote>\\n<ul>\\n<li>\\n<p>面向切面,AOP（Aspect-Oriented Programming，面向切面编程）能够将那些与业务无关，却为业务 模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少 系统的重复代码，降低模块间的耦合度，并有利于未来的可扩展性和可维护性。</p>\\n</li>\\n<li>\\n<p>Spring AOP 是基于动态代理的，如果要代理的对象实现了某个接口，那么 SpringAOP 就会使 用 JDK 动态代理去创建代理对象；而对于没有实现接口的对象，就无法使用 JDK 动态代理，转 而使用 CGlib 动态代理生成一个被代理对象的子类来作为代理。 当然也可以使用 AspectJ，Spring AOP 中已经集成了 AspectJ，AspectJ 应该算得上是 Java 生 态系统中最完整的 AOP 框架了。使用 AOP 之后我们可以把一些通用功能抽象出来，在需要用到 的地方直接使用即可，这样可以大大简化代码量。我们需要增加新功能也方便，提高了系统的扩展性。日志功能、事务管理和权限管理等场景都用到了 AOP。</p>\\n</li>\\n</ul>"}');export{e as data};
