const e=JSON.parse('{"key":"v-4f8e8242","path":"/language/Java/%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92.html","title":"《异步编排》","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2020-05-10T00:00:00.000Z","category":["Java"],"tag":["并发","多线程"]},"headers":[{"level":2,"title":"Future","slug":"future","link":"#future","children":[]}],"git":{"createdTime":1710142698000,"updatedTime":1710142698000,"contributors":[{"name":"sz-Dawson","email":"dragon.zbl@qq.com","commits":1}]},"readingTime":{"minutes":2.63,"words":789},"filePathRelative":"language/Java/异步编排.md","localizedDate":"2020年5月10日","excerpt":"<h1> 《异步编排》</h1>\\n<blockquote>\\n<p>描述</p>\\n</blockquote>\\n<p>异步编排是指在异步编程中协调多个异步操作的执行顺序和结果处理过程的一种技术。异步编程是指在不阻塞线程的情况下进行 I/O 或其他非 CPU 密集型操作。</p>\\n<p>在异步编程中，我们通常采用回调函数或 Future 等方式来处理异步操作的结果。但在实际的应用场景中，可能存在需要按照特定的顺序执行多个异步操作，并且需要根据前面的操作结果来触发后续操作的需求。这时就需要使用异步编排技术来协调这些异步操作的执行。</p>\\n<p>异步编排的实现方式主要有以下几种：</p>\\n<p>回调函数链式编排：将多个回调函数通过链式调用的方式连接起来，形成一个执行顺序。通过前一个回调函数的执行结果来决定是否继续执行后续的回调函数。</p>"}');export{e as data};
