import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as a,a as l}from"./app-fZFl21or.js";const i={},p=l('<h1 id="《spring-mvc执行流程》" tabindex="-1"><a class="header-anchor" href="#《spring-mvc执行流程》" aria-hidden="true">#</a> 《Spring MVC执行流程》</h1><blockquote><p>思考一个问题：每次在地址栏输入URL，总会调用到我们后端的controller包中的某个类中的某个方法,这个过程是怎么找到的？</p></blockquote><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>我们假设请求的url为 : http://localhost:8080/SpringMVC/hello</p><p><strong>如上url拆分成三部分：</strong></p><p>http://localhost:8080服务器域名</p><p>SpringMVC部署在服务器上的web站点</p><p>hello表示控制器</p><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></li><li><p>HandlerMapping为处理器<mark>映射</mark>。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是<mark>根据url查找控制器</mark>，如上url被查找控制器为：hello。</p></li><li><p>HandlerExecution将<mark>解析后的信息</mark>传递给DispatcherServlet,如解析控制器映射等。</p></li><li><p>HandlerAdapter表示处理器<mark>适配</mark>器，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的<mark>Controller执行</mark>。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用<mark>视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名</mark>。</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，<mark>调用具体的视图</mark>。</p></li><li><p>最终视图呈现给用户。</p></li></ol><p><img src="https://pic.imgdb.cn/item/65a7f096871b83018ab5c774.png"></p><h2 id="常用组件" tabindex="-1"><a class="header-anchor" href="#常用组件" aria-hidden="true">#</a> 常用组件</h2><h3 id="_1-dispatcherservlet-前端控制器" tabindex="-1"><a class="header-anchor" href="#_1-dispatcherservlet-前端控制器" aria-hidden="true">#</a> 1.DispatcherServlet（前端控制器）</h3><ul><li>作用：接收http请求和拦截，响应返回数据和视图结果</li></ul><h3 id="_2-handlermapping-处理映射器" tabindex="-1"><a class="header-anchor" href="#_2-handlermapping-处理映射器" aria-hidden="true">#</a> 2.HandlerMapping（处理映射器）</h3><ul><li>作用：根据请求的url去找到Handler</li></ul><h3 id="_3-handleradapter-处理适配器" tabindex="-1"><a class="header-anchor" href="#_3-handleradapter-处理适配器" aria-hidden="true">#</a> 3.HandlerAdapter（处理适配器）</h3><ul><li>作用：按照HandlerAdapter要求的特定规则去执行</li></ul><h3 id="_4-handler-controller" tabindex="-1"><a class="header-anchor" href="#_4-handler-controller" aria-hidden="true">#</a> 4.Handler（Controller）</h3><ul><li>作用：按照HandlerAdapter要求去执行</li></ul><h3 id="_5-viewresolver-视图解析器" tabindex="-1"><a class="header-anchor" href="#_5-viewresolver-视图解析器" aria-hidden="true">#</a> 5.ViewResolver（视图解析器）</h3><ul><li>作用：解析ModelAndView返回view视图层</li></ul>',15),t=[p];function n(d,h){return r(),a("div",null,t)}const s=e(i,[["render",n],["__file","SpringMVC执行流程.html.vue"]]);export{s as default};
