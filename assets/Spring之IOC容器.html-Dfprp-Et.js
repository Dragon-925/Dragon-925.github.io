const e=JSON.parse('{"key":"v-5d2f83ce","path":"/language/Spring/Spring%E4%B9%8BIOC%E5%AE%B9%E5%99%A8.html","title":"《Spring 之 IOC 容器》","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2020-01-10T00:00:00.000Z","category":["Java","Spring"],"tag":["IOC容器"]},"headers":[{"level":2,"title":"什么是 IOC 容器？","slug":"什么是-ioc-容器","link":"#什么是-ioc-容器","children":[]},{"level":2,"title":"为什么使用 IOC 容器？","slug":"为什么使用-ioc-容器","link":"#为什么使用-ioc-容器","children":[]},{"level":2,"title":"什么是控制反转？","slug":"什么是控制反转","link":"#什么是控制反转","children":[]},{"level":2,"title":"IOC 底层原理是什么？","slug":"ioc-底层原理是什么","link":"#ioc-底层原理是什么","children":[]},{"level":2,"title":"IOC 简单底层原理","slug":"ioc-简单底层原理","link":"#ioc-简单底层原理","children":[]}],"git":{},"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"language/Spring/Spring之IOC容器.md","localizedDate":"2020年1月10日","excerpt":"<h1> 《Spring 之 IOC 容器》</h1>\\n<h2> 什么是 IOC 容器？</h2>\\n<ul>\\n<li>其实就是控制反转，把对象的创建和对象之间的调用过程交给 Spring 管理</li>\\n</ul>\\n<h2> 为什么使用 IOC 容器？</h2>\\n<p>为了方便管理 Bean，将对象的创建和实例化过程进行解耦</p>\\n<h2> 什么是控制反转？</h2>\\n<p>控制反转，简单来说就是将控制权给到了 Spring,为的就是将对象的创建和对象调用过程进行解耦，\\n其中最常见的方式就是 DI 依赖注入：如果在注入 BeanA 到 IOC 容器，发现 BeanA 依赖于 BeanB，那么也会将 BeanB 注入到 IOC 容器中</p>"}');export{e as data};
